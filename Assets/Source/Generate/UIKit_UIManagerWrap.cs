//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIKit_UIManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIKit.UIManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("AddLoad", AddLoad);
		L.RegFunction("Destroy", Destroy);
		L.RegFunction("Query", Query);
		L.RegFunction("IsOpen", IsOpen);
		L.RegFunction("Open", Open);
		L.RegFunction("Close", Close);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("UIRoot", get_UIRoot, null);
		L.RegVar("UICamera", get_UICamera, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.AddLoad(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Destroy(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
				obj.Destroy();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<bool>(L, 2))
			{
				UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				obj.Destroy(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.Destroy(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIKit.UIManager.Destroy");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Query(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.Query(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsOpen(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
				string arg0 = ToLua.ToString(L, 2);
				bool o = obj.IsOpen(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GameObject>(L, 2))
			{
				UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				bool o = obj.IsOpen(arg0);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIKit.UIManager.IsOpen");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Open(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GameObject>(L, 2))
			{
				UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.Open(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.GameObject o = obj.Open(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIKit.UIManager.Open");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
				string arg0 = ToLua.ToString(L, 2);
				obj.Close(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.GameObject>(L, 2))
			{
				UIKit.UIManager obj = (UIKit.UIManager)ToLua.CheckObject(L, 1, typeof(UIKit.UIManager));
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				obj.Close(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIKit.UIManager.Close");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UIKit.UIManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIRoot(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UIKit.UIManager.UIRoot);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UICamera(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, UIKit.UIManager.UICamera);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

